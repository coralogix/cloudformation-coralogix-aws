AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create an OTEL ECS Daemon Service on an ECS Cluster.
  NOTE: Contains conditional IAM roles (only created for s3 and Parameter Store). 
  IAM warning appears even when no IAM resources are created - this is expected and safe to acknowledge.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - ClusterName
          - CoralogixRegion
          - CoralogixApiKey
          - CDOTImageVersion
      
      - Label:
          default: "Configuration Selection"
        Parameters:
          - ConfigSource
      
      - Label:
          default: "Default Template Configuration (required when ConfigSource=template)"
        Parameters:
          - DefaultApplicationName
          - DefaultSubsystemName
          - EnableHeadSampler
          - EnableSpanMetrics
          - EnableTracesDB
          - SamplerMode
          - SamplingPercentage
      
      - Label:
          default: "S3 Configuration (required when ConfigSource=s3)"
        Parameters:
          - S3ConfigBucket
          - S3ConfigKey
      
      - Label:
          default: "Parameter Store Configuration (required when ConfigSource=parameter-store)"
        Parameters:
          - CustomConfig
      
      - Label:
          default: "Container Configuration"
        Parameters:
          - Image
          - Memory
      
      - Label:
          default: "Health Check Configuration"
        Parameters:
          - HealthCheckEnabled
          - HealthCheckInterval
          - HealthCheckTimeout
          - HealthCheckRetries
          - HealthCheckStartPeriod
    
    ParameterLabels:
      ConfigSource:
        default: "Select Configuration Source"
      S3ConfigBucket:
        default: "S3 Bucket Name"
      S3ConfigKey:
        default: "S3 Object Key (file path)"
      CustomConfig:
        default: "Parameter Store Parameter Name"

      ClusterName:
        default: "ECS Cluster Name"
      CoralogixRegion:
        default: "Coralogix Region"
      CoralogixApiKey:
        default: "Coralogix API Key"
      DefaultApplicationName:
        default: "Default Application Name"
      DefaultSubsystemName:
        default: "Default Subsystem Name"
      EnableHeadSampler:
        default: "Enable Head Sampler"
      EnableSpanMetrics:
        default: "Enable Span Metrics"
      EnableTracesDB:
        default: "Enable Traces DB"
      SamplerMode:
        default: "Sampler Mode"
      SamplingPercentage:
        default: "Sampling Percentage"
      CDOTImageVersion:
        default: "CDOT Image Version"
      Image:
        default: "Custom Image (overrides CDOTImageVersion)"
      Memory:
        default: "Memory (MiB)"
      HealthCheckEnabled:
        default: "Enable Health Check"
      HealthCheckInterval:
        default: "Health Check Interval (seconds)"
      HealthCheckTimeout:
        default: "Health Check Timeout (seconds)"
      HealthCheckRetries:
        default: "Health Check Retries"
      HealthCheckStartPeriod:
        default: "Health Check Start Period (seconds)"

Parameters:
  ConfigSource:
    Type: String
    Description: |
      Select the configuration source for OpenTelemetry Collector.
      - 'template': Use built-in template configuration
      - 's3': Use configuration file from S3 (via S3 URI)
      - 'parameter-store': Use configuration from AWS Systems Manager Parameter Store
    Default: "template"
    AllowedValues: ["template", "s3", "parameter-store"]

  S3ConfigBucket:
    Type: String
    Description: |
      S3 bucket name containing the configuration file.
      Example: 'my-bucket'
      Required when ConfigSource is 's3'.
    Default: ""

  S3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the configuration file.
      Example: 'configs/otel-config.yaml'
      Required when ConfigSource is 's3'.
    Default: ""

  ClusterName:
    Description: |
      Name of the ECS Cluster onto which to deploy the OTEL Daemon Service.
    Type: String

  CDOTImageVersion:
    Description: |
      The Coralogix Distribution OpenTelemetry Image Version/Tag.
      View available tags here: https://hub.docker.com/r/coralogixrepo/coralogix-otel-collector/tags
      This is required when Custom Image is set to "none".
    Type: String
  
  Image:
    Description: |
      The OpenTelemetry Collector Image to use.
      If specified, this value will override the CDOTImageVersion parameter and
      the coralogix otel collector image.
    Default: "none"
    Type: String

  Memory:
    Description: |
      The amount of memory (in MiB) used by the task.
      Note that you cluster must have sufficient memory available to support the given value.
    Type: Number
    Default: "2048"

  CoralogixRegion:
      Type: String
      Description: "The Coralogix location region [EU1|EU2|AP1|AP2|AP3|US1|US2]]"
      AllowedValues:
        - EU1
        - EU2
        - AP1
        - AP2
        - AP3
        - US1
        - US2

  DefaultApplicationName:
    Type: String
    Description: |
      The default name of your application.
      Default application name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "OTEL"

  DefaultSubsystemName:
    Type: String
    Description: |
      The default subsystem name of your application.
      Default subsystem name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "ECS-EC2"

  CoralogixApiKey:
    Type: String
    Description: "The Send-Your-Data API key for your Coralogix account. See: https://coralogix.com/docs/user-guides/account-management/api-keys/send-your-data-api-key/"
    NoEcho: true
    AllowedPattern: ".+"
    ConstraintDescription: "API Key required."

  CustomConfig:
    Type: String
    Description: |
      The name of an AWS Systems Manager Parameter Store parameter to use as a custom configuration.
      Required when ConfigSource is 'parameter-store'.
    Default: "none"

  EnableHeadSampler:
    Type: String
    Description: |
      Enable or disable the head sampler for trace sampling.
      When enabled (default), traces will be sampled at the head of the pipeline before processing.
      Set to "false" to disable sampling and process all traces.
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableSpanMetrics:
    Type: String
    Description: |
      Enable or disable the spanmetrics processor and pipeline.
      When enabled (default), span metrics will be generated from traces.
      Set to "false" to disable span metrics generation.
    AllowedValues: ["true", "false"]
    Default: "true"

  EnableTracesDB:
    Type: String
    Description: |
      Enable or disable the traces/db pipeline for database operation metrics.
      When enabled (default), database operation metrics will be generated.
      Set to "false" to disable database operation metrics.
      Note: This feature requires spanmetrics to be enabled.
    AllowedValues: ["true", "false"]
    Default: "false"

  SamplerMode:
    Type: String
    Description: |
      The sampling mode to use for the head sampler.
      - proportional: Sample traces at a fixed percentage
      - equalizing: Dynamically adjust sampling rate to achieve a desired throughput
      - hash_seed: Use consistent sampling based on a hash of trace attributes
    AllowedValues: [proportional, equalizing, hash_seed]
    Default: proportional

  SamplingPercentage:
    Type: String
    Description: |
      The percentage of traces to sample (0-100).
      A value of 100 means all traces will be sampled, while 0 means no traces will be sampled.
      Default is 10% sampling.
    Default: "10"

  HealthCheckEnabled:
    Type: String
    Description: Enable ECS container health check for the OTEL agent container.
    AllowedValues: ["true", "false"]
    Default: "false"

  HealthCheckInterval:
    Type: Number
    Description: Health check interval (seconds). Only used if HealthCheckEnabled is true
    Default: "30"

  HealthCheckTimeout:
    Type: Number
    Description: Health check timeout (seconds). Only used if HealthCheckEnabled is true
    Default: "5"

  HealthCheckRetries:
    Type: Number
    Description: Health check retries. Only used if HealthCheckEnabled is true
    Default: "3"

  HealthCheckStartPeriod:
    Type: Number
    Description: Health check start period (seconds). Only used if HealthCheckEnabled is true
    Default: "10"

Conditions:
  UseImage: !Not [!Equals [!Ref Image, "none"]]
  UseDefaultConfig: !Equals [!Ref ConfigSource, "template"]
  UseS3Config: !Equals [!Ref ConfigSource, "s3"]
  UseSSMConfig: !Equals [!Ref ConfigSource, "parameter-store"]
  UseTemplateOrS3Config: !Or [!Equals [!Ref ConfigSource, "template"], !Equals [!Ref ConfigSource, "s3"]]
  DisableHeadSamplerCondition: !Equals [!Ref EnableHeadSampler, "false"]
  EnableSpanMetricsCondition: !Equals [!Ref EnableSpanMetrics, "true"]
  EnableTracesDBCondition:
    Fn::And:
      - !Equals [!Ref EnableTracesDB, "true"]
      - !Equals [!Ref EnableSpanMetrics, "true"]
  EnableHealthCheck: !Equals [!Ref HealthCheckEnabled, "true"]

Rules:

  ValidateS3Parameters:
    Assertions:
      - Assert:
          Fn::Or:
            - Fn::Not:
                - Fn::Equals:
                    - !Ref ConfigSource
                    - "s3"
            - Fn::Not:
                - Fn::Equals:
                    - !Ref S3ConfigBucket
                    - ""
            - Fn::Not:
                - Fn::Equals:
                    - !Ref S3ConfigKey
                    - ""
        AssertDescription: "S3ConfigBucket and S3ConfigKey must be provided when ConfigSource is 's3'."

  ValidateParameterStoreParameters:
    Assertions:
      - Assert:
          Fn::Or:
            - Fn::Not:
                - Fn::Equals:
                    - !Ref ConfigSource
                    - "parameter-store"
            - Fn::Not:
                - Fn::Equals:
                    - !Ref CustomConfig
                    - "none"
        AssertDescription: "CustomConfig must be provided when ConfigSource is 'parameter-store'."



Mappings:
  Otel:
    BaseConfig:
      Value: |
        receivers:
          otlp:
            protocols:
              grpc: { endpoint: 0.0.0.0:4317, max_recv_msg_size_mib: 20 }
              http: { endpoint: 0.0.0.0:4318 }

          awsecscontainermetricsd:

          prometheus:
            config:
              scrape_configs:
              - job_name: otel-collector-metrics
                scrape_interval: 30s
                static_configs:
                - targets: ["localhost:8888"]

          filelog:
            start_at: end
            force_flush_period: 0
            include:
              - /hostfs/var/lib/docker/containers/*/*.log
            include_file_name: false
            include_file_path: true
            operators:
              - type: router
                id: docker_log_json_parser
                routes:
                  - output: json_parser
                    expr: 'body matches "^\\{\"log\".*\\}"'
                default: move_log_file_path

              - type: json_parser
                parse_from: body
                parse_to: body
                output: recombine
                timestamp:
                  parse_from: body.time
                  layout: '%Y-%m-%dT%H:%M:%S.%fZ'

              - type: recombine
                id: recombine
                output: move_log_file_path
                combine_field: body.log
                source_identifier: attributes["log.file.path"]
                is_last_entry: body.log endsWith "\n"
                force_flush_period: 10s	
                on_error: send
                combine_with: ""

              - type: move
                id: move_log_file_path
                from: attributes["log.file.path"]
                to: resource["log.file.path"]

          hostmetrics:
            root_path: /
            collection_interval: 10s
            scrapers:
              cpu: { metrics: { system.cpu.utilization: { enabled: true } } }
              filesystem:
                exclude_fs_types: { fs_types: [autofs, binfmt_misc, bpf, cgroup2, configfs, debugfs, devpts, devtmpfs, fusectl, hugetlbfs, iso9660, mqueue, nsfs, overlay, proc, procfs, pstore, rpc_pipefs, securityfs, selinuxfs, squashfs, sysfs, tracefs], match_type: strict }
                exclude_mount_points: { match_type: regexp, mount_points: [/dev/*, /proc/*, /sys/*, /run/k3s/containerd/*, /run/containerd/runc/*, /var/lib/docker/*, /var/lib/kubelet/*, /snap/*] }
              memory: { metrics: { system.memory.utilization: { enabled: true } } }
              process:
                metrics:
                  process.cpu.utilization: { enabled: true }
                  process.memory.utilization: { enabled: true }
                  process.threads: { enabled: true }
                mute_process_exe_error: true
                mute_process_user_error: true

        processors:
          ecsattributes/container-logs:
            container_id:
              sources:
                - "log.file.path"

          transform/logs:
            error_mode: ignore
            log_statements:
              - context: resource
                statements:
                  - set(attributes["cx_container_id"], attributes["docker.id"])
                  - set(attributes["aws_ecs_task_family"], attributes["aws.ecs.task.definition.family"])
                  - set(attributes["image_id"], attributes["image.id"])
                  - delete_key(attributes, "image.id")

          transform/entity-event:
            error_mode: silent
            log_statements:
              - context: log
                statements:
                  - set(attributes["otel.entity.id"]["host.id"], resource.attributes["host.id"])
                  - merge_maps(attributes, resource.attributes, "insert")
              - context: resource
                statements:
                  - keep_keys(attributes, [""])

          # remove unneeded labels from metrics added as of otel v0.119.0
          transform/prometheus:
            error_mode: ignore
            metric_statements:
              - context: metric
                statements:
                  - replace_pattern(name, "_total$", "")
              - context: datapoint
                statements:
                  - delete_key(attributes, "otel_scope_name") where resource.attributes["service.name"] == "cdot"
                  - delete_key(attributes, "service.name") where resource.attributes["service.name"] == "cdot"

              - context: resource
                statements:
                  - delete_key(attributes, "service.instance.id") where attributes["service.name"] == "cdot"
                  - delete_key(attributes, "service.name") where attributes["service.name"] == "cdot"

          transform/semconv:
            error_mode: ignore
            trace_statements:
              - context: span
                statements:
                  - set(attributes["http.method"], attributes["http.request.method"]) where attributes["http.request.method"] != nil



          filter/db_spanmetrics:
            traces:
              span:
                - 'attributes["db.system"] == nil'

          batch: { send_batch_max_size: 2048, send_batch_size: 1024, timeout: 1s }

          resource/metadata:
            attributes:
              - action: upsert
                key: cx.otel_integration.name
                value: coralogix-integration-ecs-ec2

          resourcedetection/otel-collector:
            detectors: [system, env, ecs, ec2]
            override: false
            timeout: 2s
            system:
              resource_attributes:
                host.id: { enabled: false }
                host.cpu.cache.l2.size: { enabled: true }
                host.cpu.stepping: { enabled: true }
                host.cpu.model.name: { enabled: true }
                host.cpu.model.id: { enabled: true }
                host.cpu.family: { enabled: true }
                host.cpu.vendor.id: { enabled: true }
                host.mac: { enabled: true }
                host.ip: { enabled: true }
                os.description: { enabled: true }

          resourcedetection/entity:
            detectors: [system, env, ecs, ec2]
            override: false
            timeout: 2s
            system:
              resource_attributes:
                host.id: { enabled: false }
                host.cpu.cache.l2.size: { enabled: true }
                host.cpu.stepping: { enabled: true }
                host.cpu.model.name: { enabled: true }
                host.cpu.model.id: { enabled: true }
                host.cpu.family: { enabled: true }
                host.cpu.vendor.id: { enabled: true }
                host.mac: { enabled: true }
                host.ip: { enabled: true }
                os.description: { enabled: true }

          probabilistic_sampler:
            sampling_percentage: "${SAMPLING_PERCENTAGE}"
            mode: "${SAMPLER_MODE}"

        exporters:
          coralogix:
            domain: "${CORALOGIX_DOMAIN}"
            private_key: "${PRIVATE_KEY}"
            application_name: "${APP_NAME}"
            subsystem_name: "${SUB_SYS}"
            application_name_attributes:
            - "aws.ecs.cluster"
            - "aws.ecs.task.definition.family"
            subsystem_name_attributes:
            - "aws.ecs.container.name"
            - "aws.ecs.docker.name"
            - "docker.name"
            timeout: 30s

          coralogix/resource_catalog:
            application_name: resource
            domain: ${CORALOGIX_DOMAIN}
            private_key: ${PRIVATE_KEY}
            logs:
              headers:
                X-Coralogix-Distribution: ecs-ec2-integration/1.0.0
                x-coralogix-ingress: metadata-as-otlp-logs/v1
            subsystem_name: catalog
            timeout: 30s
            
        connectors:
          forward/sampled: {}
          spanmetrics:
            dimensions:
              - name: http.method
              - name: cgx.transaction
              - name: cgx.transaction.root
              - name: status_code
              - name: db.namespace
              - name: db.operation.name
              - name: db.collection.name
              - name: db.system
              - name: http.response.status_code
              - name: rpc.grpc.status_code
              - name: service.version
            histogram:
              explicit:
                buckets:
                  - 1ms
                  - 4ms
                  - 10ms
                  - 20ms
                  - 50ms
                  - 100ms
                  - 200ms
                  - 500ms
                  - 1s
                  - 2s
                  - 5s
            metrics_expiration: 5m
            metrics_flush_interval: '30s'
            namespace: ""
          forward/db: {}
          spanmetrics/db:
            dimensions:
              - name: db.namespace
              - name: db.operation.name
              - name: db.collection.name
              - name: db.system
              - name: service.version
            histogram:
              explicit:
                buckets:
                  - 100us
                  - 1ms
                  - 2ms
                  - 2.5ms
                  - 4ms
                  - 6ms
                  - 10ms
                  - 100ms
                  - 250ms
            metrics_expiration: 5m
            metrics_flush_interval: '30s'
            namespace: db

    PipelineSamplingOnly:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces/otlp:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [forward/sampled]
              
            traces/sampled:
              receivers: [forward/sampled]
              processors: [probabilistic_sampler, batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888



    PipelineSamplingWithSpanMetricsAndTracesDB:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [forward/sampled, spanmetrics, forward/db]
              
            traces/sampled:
              receivers: [forward/sampled]
              processors: [probabilistic_sampler, batch]
              exporters: [coralogix]

            traces/db:
              receivers: [forward/db]
              processors: [filter/db_spanmetrics, batch]
              exporters: [spanmetrics/db]

            metrics/spanmetrics:
              receivers: [spanmetrics]
              processors: [batch]
              exporters: [coralogix]

            metrics/spanmetrics-db:
              receivers: [spanmetrics/db]
              processors: [batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

    PipelineSamplingWithSpanMetrics:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces/otlp:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [forward/sampled, spanmetrics]
              
            traces/sampled:
              receivers: [forward/sampled]
              processors: [probabilistic_sampler, batch]
              exporters: [coralogix]

            metrics/spanmetrics:
              receivers: [spanmetrics]
              processors: [batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

    PipelineNoSampling:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces/otlp:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

    PipelineNoSamplingWithSpanMetrics:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [coralogix, spanmetrics]

            metrics/spanmetrics:
              receivers: [spanmetrics]
              processors: [batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

    PipelineNoSamplingWithSpanMetricsAndTracesDB:
      Value: |
        extensions:
          health_check: {}
          pprof: {}

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces:
              receivers: [otlp]
              processors: [resource/metadata, transform/semconv, batch]
              exporters: [coralogix, spanmetrics, forward/db]

            traces/db:
              receivers: [forward/db]
              processors: [filter/db_spanmetrics, batch]
              exporters: [spanmetrics/db]

            metrics/spanmetrics:
              receivers: [spanmetrics]
              processors: [batch]
              exporters: [coralogix]

            metrics/spanmetrics-db:
              receivers: [spanmetrics/db]
              processors: [batch]
              exporters: [coralogix]

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              encoding: json
              level: warn
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

  CoralogixRegionMap:
    EU1:
      Endpoint: ingress.coralogix.com:443
      Domain: coralogix.com
    EU2:
      Endpoint: ingress.eu2.coralogix.com:443
      Domain: eu2.coralogix.com
    AP1:
      Endpoint: ingress.coralogix.in:443
      Domain: coralogix.in
    AP2:
      Endpoint: ingress.coralogixsg.com:443
      Domain: coralogixsg.com
    AP3:
      Endpoint: ingress.ap3.coralogix.com:443
      Domain: ap3.coralogix.com
    US1:
      Endpoint: ingress.coralogix.us:443
      Domain: coralogix.us
    US2:
      Endpoint: ingress.cx498.coralogix.com:443
      Domain: cx498.coralogix.com

Resources:
  OtelTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseDefaultConfig
    Properties:
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: !If
            - UseS3Config
            - ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${S3ConfigKey}"]
            - ["--config", "env:OTEL_CONFIG"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"

          Essential: true
          HealthCheck: !If
            - EnableHealthCheck
            - Command:
                - "/healthcheck"
              Interval: !Ref HealthCheckInterval
              Timeout: !Ref HealthCheckTimeout
              Retries: !Ref HealthCheckRetries
              StartPeriod: !Ref HealthCheckStartPeriod
            - !Ref AWS::NoValue

          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: CORALOGIX_PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref DefaultApplicationName

            - Name: SUB_SYS
              Value: !Ref DefaultSubsystemName
              
            - Name: SAMPLING_PERCENTAGE
              Value: !Ref SamplingPercentage

            - Name: SAMPLER_MODE
              Value: !Ref SamplerMode

            - Name: OTEL_CONFIG
              Value: !Sub
                - |
                  ${BaseConfig}
                  ${PipelineConfig}
                - 
                  BaseConfig: !FindInMap [Otel, BaseConfig, Value]
                  PipelineConfig: !If
                    - DisableHeadSamplerCondition
                    - !If
                      - EnableTracesDBCondition
                      - !FindInMap [Otel, PipelineNoSamplingWithSpanMetricsAndTracesDB, Value]
                      - !If
                        - EnableSpanMetricsCondition
                        - !FindInMap [Otel, PipelineNoSamplingWithSpanMetrics, Value]
                        - !FindInMap [Otel, PipelineNoSampling, Value]
                    - !If
                      - EnableTracesDBCondition
                      - !FindInMap [Otel, PipelineSamplingWithSpanMetricsAndTracesDB, Value]
                      - !If
                        - EnableSpanMetricsCondition
                        - !FindInMap [Otel, PipelineSamplingWithSpanMetrics, Value]
                        - !FindInMap [Otel, PipelineSamplingOnly, Value]

  # Task Definition for S3 configuration
  OtelTaskDefinitionS3: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseS3Config
    Properties:
      ExecutionRoleArn: !Ref OtelTaskExecutionRole
      TaskRoleArn: !Ref OtelTaskExecutionRole
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${S3ConfigKey}"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"

          Essential: true
          HealthCheck: !If
            - EnableHealthCheck
            - Command:
                - "/healthcheck"
              Interval: !Ref HealthCheckInterval
              Timeout: !Ref HealthCheckTimeout
              Retries: !Ref HealthCheckRetries
              StartPeriod: !Ref HealthCheckStartPeriod
            - !Ref AWS::NoValue

          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: CORALOGIX_PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref DefaultApplicationName

            - Name: SUB_SYS
              Value: !Ref DefaultSubsystemName
              
            - Name: SAMPLING_PERCENTAGE
              Value: !Ref SamplingPercentage

            - Name: SAMPLER_MODE
              Value: !Ref SamplerMode

  # IAM Role for S3 access (only created when ConfigSource=s3)
  OtelTaskExecutionRole:
    Type: AWS::IAM::Role
    Condition: UseS3Config
    Properties:
      RoleName: !Sub "${AWS::StackName}-otel-task-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub "arn:aws:s3:::${S3ConfigBucket}/*"

  # IAM Role for Parameter Store access (only created when ConfigSource=parameter-store)
  OtelTaskExecutionRoleSSM:
    Type: AWS::IAM::Role
    Condition: UseSSMConfig
    Properties:
      RoleName: !Sub "${AWS::StackName}-otel-task-execution-role-parameter-store"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ParameterStoreReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CustomConfig}"

  OtelTaskDefinitionCustom: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseSSMConfig
    Properties:
      ExecutionRoleArn: !Ref OtelTaskExecutionRoleSSM
      TaskRoleArn: !Ref OtelTaskExecutionRoleSSM
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: ["--config", "env:OTEL_CONFIG"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"
            
          Essential: true
          HealthCheck: !If
            - EnableHealthCheck
            - Command:
                - "/healthcheck"
              Interval: !Ref HealthCheckInterval
              Timeout: !Ref HealthCheckTimeout
              Retries: !Ref HealthCheckRetries
              StartPeriod: !Ref HealthCheckStartPeriod
            - !Ref AWS::NoValue

          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: CORALOGIX_PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref DefaultApplicationName

            - Name: SUB_SYS
              Value: !Ref DefaultSubsystemName
              
            - Name: SAMPLING_PERCENTAGE
              Value: !Ref SamplingPercentage

            - Name: SAMPLER_MODE
              Value: !Ref SamplerMode

          Secrets:
            - Name: OTEL_CONFIG
              ValueFrom: !If
                - UseSSMConfig
                - !Ref CustomConfig
                - !Ref AWS::NoValue

  ECSService:
    Type: 'AWS::ECS::Service'
    Condition: UseDefaultConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinition

  ECSServiceS3:
    Type: 'AWS::ECS::Service'
    Condition: UseS3Config
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinitionS3

  ECSServiceSSM:
    Type: 'AWS::ECS::Service'
    Condition: UseSSMConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinitionCustom 