AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create an OTEL ECS Daemon Service on an ECS Cluster.

Parameters:
  ClusterName:
    Description: |
      Name of the ECS Cluster onto which to deploy the OTEL Daemon Service.
    Type: String

  CDOTImageVersion:
    Description: |
      The Coralogix Distribution OpenTelemetry Image Version/Tag.
      View available tags here: https://hub.docker.com/r/coralogixrepo/coralogix-otel-collector/tags
    Type: String
  
  Image:
    Description: |
      The OpenTelemetry Collector Image to use.
      If specified, this value will override the CDOTImageVersion parameter and
      the coralogix otel collector image.
    Default: none
    Type: String

  Memory:
    Description: |
      The amount of memory (in MiB) used by the task.
      Note that you cluster must have sufficient memory available to support the given value.
    Type: Number
    Default: "256"

  CoralogixRegion:
      Type: String
      Description: "The Coralogix location region [EU1|EU2|AP1|AP2|AP3|US1|US2]]"
      AllowedValues:
        - EU1
        - EU2
        - AP1
        - AP2
        - AP3
        - US1
        - US2

  DefaultApplicationName:
    Type: String
    Description: |
      The default name of your application.
      Default application name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "OTEL"

  DefaultSubsystemName:
    Type: String
    Description: |
      The default subsystem name of your application.
      Default subsystem name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "ECS-EC2"

  CoralogixApiKey:
    Type: String
    Description: "The Send-Your-Data API key for your Coralogix account. See: https://coralogix.com/docs/user-guides/account-management/api-keys/send-your-data-api-key/"
    NoEcho: true
    AllowedPattern: ".+"
    ConstraintDescription: "API Key required."

  CustomConfig:
    Type: String
    Description: |
      The name of a Parameter Store to use as a custom configuration.
      If left as 'none' will use the default configuration from the template.
    Default: "none"

  TaskExecutionRoleARN:
    Type: String
    Description: |
      When using a Custom Configuration in Parameter Store, set to the ARN of a Task Execution Role that has access to the PS.
    Default: "Default"

  EnableHeadSampler:
    Type: String
    Description: |
      Enable or disable the head sampler for trace sampling.
      When enabled, traces will be sampled at the head of the pipeline before processing.
    AllowedValues: [true, false]
    Default: true

  SamplerMode:
    Type: String
    Description: |
      The sampling mode to use for the head sampler.
      - proportional: Sample traces at a fixed percentage
      - equalizing: Dynamically adjust sampling rate to achieve a desired throughput
      - hash_seed: Use consistent sampling based on a hash of trace attributes
    AllowedValues: [proportional, equalizing, hash_seed]
    Default: proportional

  SamplingPercentage:
    Type: Number
    Description: |
      The percentage of traces to sample (0-100).
      A value of 100 means all traces will be sampled, while 0 means no traces will be sampled.    Default: 10
    MinValue: 0
    MaxValue: 100

Conditions:
  UseImage: !Not [!Equals [ !Ref Image, "none" ]]
  UseDefaultConfig: !Equals [ !Ref CustomConfig, "none" ]
  UseCustomConfig: 
    Fn::Not: 
    - !Equals [ !Ref CustomConfig, "none" ]

Rules:
  ValidateTaskExecutionRole:
    Assertions:
      - Assert:
          Fn::Or:
            - Fn::Equals:
                - Ref: CustomConfig
                - "none"
            - Fn::Not:
                - Fn::Equals:
                    - Ref: TaskExecutionRoleARN
                    - "Default"
        AssertDescription: "TaskExecutionRoleARN cannot be 'Default' if CustomConfig is set to a value other than 'none'."

Mappings:
  Otel:
    Config:
      Default: !Sub |
        ${EnableHeadSampler == "true" ? "connectors:\n  forward/sampled: {}\n" : ""}
        receivers:
          otlp:
            protocols:
              grpc: { endpoint: 0.0.0.0:4317 }
              http: { endpoint: 0.0.0.0:4318 }

          awsecscontainermetricsd:

          prometheus:
            config:
              scrape_configs:
              - job_name: otel-collector-metrics
                scrape_interval: 30s
                static_configs:
                - targets: ["localhost:8888"]

          filelog:
            start_at: end
            force_flush_period: 0
            include:
              - /hostfs/var/lib/docker/containers/*/*.log
            include_file_name: false
            include_file_path: true
            operators:
              - type: router
                id: docker_log_json_parser
                routes:
                  - output: json_parser
                    expr: 'body matches "^\\{\"log\".*\\}"'
                default: move_log_file_path

              - type: json_parser
                parse_from: body
                parse_to: body
                output: recombine
                timestamp:
                  parse_from: body.time
                  layout: '%Y-%m-%dT%H:%M:%S.%fZ'

              # handle logs split by docker
              - type: recombine
                id: recombine
                output: move_log_file_path
                combine_field: body.log
                source_identifier: attributes["log.file.path"]
                is_last_entry: body.log endsWith "\n"
                force_flush_period: 10s	
                on_error: send
                combine_with: ""

              - type: move
                id: move_log_file_path
                from: attributes["log.file.path"]
                to: resource["log.file.path"]

          hostmetrics:
            root_path: /
            collection_interval: 10s
            scrapers:
              cpu: { metrics: { system.cpu.utilization: { enabled: true } } }
              filesystem:
                exclude_fs_types: { fs_types: [autofs, binfmt_misc, bpf, cgroup2, configfs, debugfs, devpts, devtmpfs, fusectl, hugetlbfs, iso9660, mqueue, nsfs, overlay, proc, procfs, pstore, rpc_pipefs, securityfs, selinuxfs, squashfs, sysfs, tracefs], match_type: strict }
                exclude_mount_points: { match_type: regexp, mount_points: [/dev/*, /proc/*, /sys/*, /run/k3s/containerd/*, /run/containerd/runc/*, /var/lib/docker/*, /var/lib/kubelet/*, /snap/*] }
              memory: { metrics: { system.memory.utilization: { enabled: true } } }
              process:
                metrics:
                  process.cpu.utilization: { enabled: true }
                  process.memory.utilization: { enabled: true }
                  process.threads: { enabled: true }
                mute_process_exe_error: true
                mute_process_user_error: true

        processors:
          ecsattributes/container-logs:
            container_id:
              sources:
                - "log.file.path"

          transform/logs:
            error_mode: ignore
            log_statements:
              - context: resource
                statements:
                  - set(attributes["cx_container_id"], attributes["docker.id"])
                  - set(attributes["aws_ecs_task_family"], attributes["aws.ecs.task.definition.family"])
                  - set(attributes["image_id"], attributes["image.id"])
                  - delete_key(attributes, "image.id")

          transform/entity-event:
            error_mode: silent
            log_statements:
              - context: log
                statements:
                  - set(attributes["otel.entity.id"]["host.id"], resource.attributes["host.id"])
                  - merge_maps(attributes, resource.attributes, "insert")
              - context: resource
                statements:
                  - keep_keys(attributes, [""])

          # remove unneeded labels from metrics added as of otel v0.119.0
          transform/prometheus:
            error_mode: ignore
            metric_statements:
              - context: metric
                statements:
                  - replace_pattern(name, "_total$", "")
              - context: datapoint
                statements:
                  - delete_key(attributes, "otel_scope_name") where resource.attributes["service.name"] == "cdot"
                  - delete_key(attributes, "service.name") where resource.attributes["service.name"] == "cdot"

              - context: resource
                statements:
                  - delete_key(attributes, "service.instance.id") where attributes["service.name"] == "cdot"
                  - delete_key(attributes, "service.name") where attributes["service.name"] == "cdot"

          
          batch: { send_batch_max_size: 2048, send_batch_size: 1024, timeout: 1s }
          ${EnableHeadSampler == "true" ? "head_sampler:\n    sampling_percentage: ${SamplingPercentage}\n    mode: ${SamplerMode}\n" : ""}

          resource/metadata:
            attributes:
              - action: upsert
                key: cx.otel_integration.name
                value: coralogix-integration-ecs-ec2

          # otel-collector resource detection for collector
          resourcedetection/otel-collector:
            detectors: [system, env, ecs, ec2]
            override: false
            timeout: 2s
            system:
              resource_attributes:
                host.id: { enabled: false }
                host.cpu.cache.l2.size: { enabled: true }
                host.cpu.stepping: { enabled: true }
                host.cpu.model.name: { enabled: true }
                host.cpu.model.id: { enabled: true }
                host.cpu.family: { enabled: true }
                host.cpu.vendor.id: { enabled: true }
                host.mac: { enabled: true }
                host.ip: { enabled: true }
                os.description: { enabled: true }

          resourcedetection/entity:
            detectors: [system, env, ecs, ec2]
            override: false
            timeout: 2s
            system:
              resource_attributes:
                host.id: { enabled: false }
                host.cpu.cache.l2.size: { enabled: true }
                host.cpu.stepping: { enabled: true }
                host.cpu.model.name: { enabled: true }
                host.cpu.model.id: { enabled: true }
                host.cpu.family: { enabled: true }
                host.cpu.vendor.id: { enabled: true }
                host.mac: { enabled: true }
                host.ip: { enabled: true }
                os.description: { enabled: true }

        exporters:
          coralogix:
            domain: "${CORALOGIX_DOMAIN}"
            private_key: "${PRIVATE_KEY}"
            application_name: "${APP_NAME}"
            subsystem_name: "${SUB_SYS}"
            application_name_attributes:
            - "aws.ecs.cluster"
            - "aws.ecs.task.definition.family"
            subsystem_name_attributes:
            - "aws.ecs.container.name"
            - "aws.ecs.docker.name"
            - "docker.name"
            timeout: 30s

          coralogix/resource_catalog:
            application_name: resource
            domain: ${CORALOGIX_DOMAIN}
            private_key: ${PRIVATE_KEY}
            logs:
              headers:
                X-Coralogix-Distribution: ecs-ec2-integration/1.0.0
                x-coralogix-ingress: metadata-as-otlp-logs/v1
            subsystem_name: catalog
            timeout: 30s

        extensions:
          health_check:
          pprof:

        service:
          extensions:
            - health_check
            - pprof

          pipelines:
            logs/container-logs:
              receivers: [filelog]
              processors: [ecsattributes/container-logs, resource/metadata, transform/logs, batch]
              exporters: [coralogix]

            metrics/container-metrics:
              receivers: [awsecscontainermetricsd]
              processors: [batch]
              exporters: [coralogix]

            logs/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            metrics/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [coralogix]

            traces/otlp:
              receivers: [otlp]
              processors: [resource/metadata, batch]
              exporters: [${EnableHeadSampler == "true" ? "forward/sampled" : "coralogix"}]

            ${EnableHeadSampler == "true" ? "traces/sampled:
              receivers: [forward/sampled]
              processors: [head_sampler, batch]
              exporters: [coralogix]" : ""}

            logs/resource_catalog:
              receivers: [hostmetrics]
              processors: [resourcedetection/entity, transform/entity-event, batch]
              exporters: [coralogix/resource_catalog]

            metrics/otel-collector:
              receivers: [prometheus, hostmetrics]
              processors: [resourcedetection/otel-collector, resource/metadata, transform/prometheus, batch]
              exporters: [coralogix]

          telemetry:
            logs:
              level: warn

            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: 0.0.0.0
                        port: 8888

  CoralogixRegionMap:
    EU1:
      Endpoint: ingress.coralogix.com:443
      Domain: coralogix.com
    EU2:
      Endpoint: ingress.eu2.coralogix.com:443
      Domain: eu2.coralogix.com
    AP1:
      Endpoint: ingress.coralogix.in:443
      Domain: coralogix.in
    AP2:
      Endpoint: ingress.coralogixsg.com:443
      Domain: coralogixsg.com
    AP3:
      Endpoint: ingress.ap3.coralogix.com:443
      Domain: ap3.coralogix.com
    US1:
      Endpoint: ingress.coralogix.us:443
      Domain: coralogix.us
    US2:
      Endpoint: ingress.cx498.coralogix.com:443
      Domain: cx498.coralogix.com

Resources:
  OtelTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseDefaultConfig
    Properties:
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: ["--config", "env:OTEL_CONFIG"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"

          Essential: true

          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref DefaultApplicationName

            - Name: SUB_SYS
              Value: !Ref DefaultSubsystemName

            - Name: OTEL_CONFIG
              Value: !FindInMap [Otel, Config, Default]

  OtelTaskDefinitionCustom: 
    Type: AWS::ECS::TaskDefinition
    Condition: UseCustomConfig
    Properties:
      ExecutionRoleArn: !Ref TaskExecutionRoleARN
      Family: opentelemetry
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: ["--config", "env:OTEL_CONFIG"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"
            
          Essential: true
          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref DefaultApplicationName

            - Name: SUB_SYS
              Value: !Ref DefaultSubsystemName

          Secrets:
            - Name: OTEL_CONFIG
              ValueFrom: !Ref CustomConfig

  ECSService:
    Type: 'AWS::ECS::Service'
    Condition: UseDefaultConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinition

  ECSServiceCustom:
    Type: 'AWS::ECS::Service'
    Condition: UseCustomConfig
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-agent
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinitionCustom
