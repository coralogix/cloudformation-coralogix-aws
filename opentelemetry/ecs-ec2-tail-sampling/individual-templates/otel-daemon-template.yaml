AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create an OTEL ECS Daemon Service on an ECS Cluster for Tail Sampling Infrastructure.
  This template deploys a minimal OTel daemon that only uses S3 configuration.
  NOTE: Contains conditional IAM roles (only created for s3). 
  IAM warning appears even when no IAM resources are created - this is expected and safe to acknowledge.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - ClusterName
          - CoralogixRegion
          - CoralogixApiKey
          - CDOTImageVersion
      
      - Label:
          default: "S3 Configuration (required)"
        Parameters:
          - S3ConfigBucket
          - S3ConfigKey
      
      - Label:
          default: "Container Configuration"
        Parameters:
          - Image
          - Memory
    
    ParameterLabels:
      S3ConfigBucket:
        default: "S3 Bucket Name"
      S3ConfigKey:
        default: "S3 Object Key (file path)"

      ClusterName:
        default: "ECS Cluster Name"
      CoralogixRegion:
        default: "Coralogix Region"
      CoralogixApiKey:
        default: "Coralogix API Key"
      CDOTImageVersion:
        default: "CDOT Image Version"
      Image:
        default: "Custom Image (overrides CDOTImageVersion)"
      Memory:
        default: "Memory (MiB)"

Parameters:
  S3ConfigBucket:
    Type: String
    Description: |
      S3 bucket name containing the configuration file.
      Example: 'my-bucket'
    AllowedPattern: ".+"
    ConstraintDescription: "S3 bucket name is required."

  S3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the configuration file.
      Example: 'configs/otel-config.yaml'
    AllowedPattern: ".+"
    ConstraintDescription: "S3 object key is required."

  ClusterName:
    Description: |
      Name of the ECS Cluster onto which to deploy the OTEL Daemon Service.
    Type: String

  CDOTImageVersion:
    Description: |
      The Coralogix Distribution OpenTelemetry Image Version/Tag.
      View available tags here: https://hub.docker.com/r/coralogixrepo/coralogix-otel-collector/tags
      This is required when Custom Image is set to "none".
    Type: String
  
  Image:
    Description: |
      The OpenTelemetry Collector Image to use.
      If specified, this value will override the CDOTImageVersion parameter and
      the coralogix otel collector image.
    Default: "none"
    Type: String

  Memory:
    Description: |
      The amount of memory (in MiB) used by the task.
      Note that you cluster must have sufficient memory available to support the given value.
    Type: Number
    Default: "1024"

  CoralogixRegion:
      Type: String
      Description: "The Coralogix location region [EU1|EU2|AP1|AP2|AP3|US1|US2]]"
      AllowedValues:
        - EU1
        - EU2
        - AP1
        - AP2
        - AP3
        - US1
        - US2

  CoralogixApiKey:
    Type: String
    Description: "The Send-Your-Data API key for your Coralogix account. See: https://coralogix.com/docs/user-guides/account-management/api-keys/send-your-data-api-key/"
    NoEcho: true
    AllowedPattern: ".+"
    ConstraintDescription: "API Key required."

  ApplicationName:
    Type: String
    Description: |
      The default name of your application.
      Default application name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "OTEL"

  SubsystemName:
    Type: String
    Description: |
      The default subsystem name of your application.
      Default subsystem name will be only be used when no dynamic application name is found, as configured in the Coralogix exporter.
    MinLength: "1"
    MaxLength: "64"
    Default: "ECS-EC2"
  TaskExecutionRoleArn:
    Type: String
    Default: ""
    Description: |
      External IAM role ARN for daemon task execution.
      If provided, this role will be used instead of creating new roles.
      Leave empty to create new roles.
    AllowedPattern: "^$|^arn:aws:iam::[0-9]{12}:role/.*$"

Conditions:
  UseImage: !Not [!Equals [!Ref Image, "none"]]
  UseExternalRole: !Equals [!Ref TaskExecutionRoleArn, ""]

Mappings:
  CoralogixRegionMap:
    EU1:
      Endpoint: ingress.coralogix.com:443
      Domain: coralogix.com
    EU2:
      Endpoint: ingress.eu2.coralogix.com:443
      Domain: eu2.coralogix.com
    AP1:
      Endpoint: ingress.coralogix.in:443
      Domain: coralogix.in
    AP2:
      Endpoint: ingress.coralogixsg.com:443
      Domain: coralogixsg.com
    AP3:
      Endpoint: ingress.ap3.coralogix.com:443
      Domain: ap3.coralogix.com
    US1:
      Endpoint: ingress.coralogix.us:443
      Domain: coralogix.us
    US2:
      Endpoint: ingress.cx498.coralogix.com:443
      Domain: cx498.coralogix.com

Resources:
  OtelTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !If
        - UseExternalRole
        - !Ref OtelTaskExecutionRole
        - !Ref TaskExecutionRoleArn
      TaskRoleArn: !If
        - UseExternalRole
        - !Ref OtelTaskExecutionRole
        - !Ref TaskExecutionRoleArn
      Family: opentelemetry-daemon
      RequiresCompatibilities:
        - EC2
      NetworkMode: host
      Volumes:
        - Name: hostfs
          Host:
            SourcePath: "/var/lib/docker/"
  
        - Name: docker-socket
          Host:
            SourcePath: /var/run/docker.sock

      ContainerDefinitions:
        - Name: coralogix-otel-agent
          Cpu: 0
          Memory: !Ref Memory
          Command: ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${S3ConfigKey}"]
          Image: !If
            - UseImage
            - !Ref Image
            - !Sub "coralogixrepo/coralogix-otel-collector:${CDOTImageVersion}"

          Essential: true

          PortMappings:
            # otel grpc endpoint
            - HostPort: 4317
              Protocol: tcp
              AppProtocol: grpc
              ContainerPort: 4317
            
            # otel http endpoint
            - HostPort: 4318
              Protocol: tcp
              ContainerPort: 4318

            # otel metrics endpoint
            - HostPort: 8888
              Protocol: tcp
              ContainerPort: 8888

            # pprof extension default port
            - HostPort: 1777
              Protocol: tcp
              ContainerPort: 1777

          # Privileged required to access certain host metrics
          Privileged: true

          MountPoints:
            - SourceVolume: hostfs
              ContainerPath: "/hostfs/var/lib/docker"
              ReadOnly: True

            - SourceVolume: docker-socket
              ContainerPath: /var/run/docker.sock

          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]
           
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixApiKey

            - Name: APP_NAME
              Value: !Ref ApplicationName

            - Name: SUB_SYS
              Value: !Ref SubsystemName

  # IAM Role for S3 access and CloudMap discovery (only created when not using external role)
  OtelTaskExecutionRole:
    Condition: UseExternalRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-otel-daemon-task-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub "arn:aws:s3:::${S3ConfigBucket}/*"
        - PolicyName: CloudMapDiscovery
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - servicediscovery:DiscoverInstances
                  - servicediscovery:ListInstances
                  - servicediscovery:ListServices
                  - servicediscovery:ListNamespaces
                Resource: "*"

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      ServiceName: coralogix-otel-daemon
      SchedulingStrategy: DAEMON
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      PlacementStrategies: []
      PlacementConstraints: []
      Tags:
        - Key: 'ecs:service:stackId'
          Value: !Ref 'AWS::StackId'
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelTaskDefinition
