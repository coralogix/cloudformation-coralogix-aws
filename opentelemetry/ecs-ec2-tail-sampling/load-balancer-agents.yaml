AWSTemplateFormatVersion: '2010-09-09'
Description: 'Step 3: Deploy Load Balancer service'

Parameters:
  ClusterName:
    Type: String
    Default: otel-cluster
    Description: Name of the ECS cluster
  NamespaceId:
    Type: String
    Description: Cloud Map namespace ID (from Step 1)
  SubnetIds:
    Type: String
    Description: Comma-separated list of private subnets for ECS services
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for ECS tasks
  ImageVersion:
    Type: String
    Description: |
      Docker image tag for the OpenTelemetry Collector (e.g., 0.129.1).
      Recommended: Use the official Coralogix supported version from https://github.com/coralogix/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/Chart.yaml#L15
      All available tags: https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
  Memory:
    Type: Number
    Default: 1024
    Description: Memory for ECS tasks (MiB)
  CoralogixDomain:
    Type: String
    Description: Coralogix domain (e.g., coralogix.com)
  CoralogixPrivateKey:
    Type: String
    Description: Coralogix private key
    NoEcho: true
  ApplicationName:
    Type: String
    Default: ecs-ec2-integration
    Description: Application name for Coralogix
  SubsystemName:
    Type: String
    Default: sampling
    Description: Subsystem name for Coralogix
  EnableSpanMetrics:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Enable spanmetrics connector in the Load Balancer
  LoadBalancerTaskCount:
    Type: Number
    Default: 1
    Description: Number of Load Balancer tasks to run
  ConfigSource:
    Type: String
    Description: |
      Select the configuration source for OpenTelemetry Collector.
      - 'template': Use built-in template configuration
      - 's3': Use configuration file from S3 (via S3 URI)
    Default: "template"
    AllowedValues: ["template", "s3"]
  S3ConfigBucket:
    Type: String
    Description: |
      S3 bucket name containing the configuration file.
      Example: 'my-bucket'
      Required when ConfigSource is 's3'.
    Default: ""
  S3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the configuration file.
      Example: 'configs/otel-config.yaml'
      Required when ConfigSource is 's3'.
    Default: ""


Conditions:
  EnableSpanMetricsCondition: !Equals [!Ref EnableSpanMetrics, "true"]
  UseS3Config: !Equals [!Ref ConfigSource, "s3"]
  UseDefaultConfig: !Equals [!Ref ConfigSource, "template"]



Resources:

  OtelLbCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: grpc-lb
      NamespaceId: !Ref NamespaceId
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  OtelLbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: opentelemetry-lb
      RequiresCompatibilities: [EC2]
      NetworkMode: awsvpc

      ContainerDefinitions:
        - Name: coralogix-lb
          Cpu: 0
          Memory: !Ref Memory
          Command: !If
            - UseS3Config
            - ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${S3ConfigKey}"]
            - ["--config", "env:OTEL_CONFIG"]
          Image: !Sub "otel/opentelemetry-collector-contrib:${ImageVersion}"
          Essential: true
          PortMappings:
            - ContainerPort: 4317
              Name: grpc
              Protocol: tcp
              AppProtocol: grpc
            - ContainerPort: 4318
              Name: http-lb
              Protocol: tcp
            - ContainerPort: 8888
              Name: metrics-lb
              Protocol: tcp
            - ContainerPort: 1777
              Name: pprof-lb
              Protocol: tcp
          Privileged: true
          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !Ref CoralogixDomain
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixPrivateKey
            - Name: APP_NAME
              Value: !Ref ApplicationName
            - Name: SUB_SYS
              Value: !Ref SubsystemName
            - Name: OTEL_CONFIG
              Value: !If
                - UseS3Config
                - ""
                - !If
                  - EnableSpanMetricsCondition
                  - |
                    receivers:
                      otlp:
                        protocols:
                          grpc:
                            endpoint: 0.0.0.0:4317
                            max_recv_msg_size_mib: 20
                          http:
                            endpoint: 0.0.0.0:4318
                        prometheus:
                          config:
                            scrape_configs:
                              - job_name: otel-collector-metrics
                                scrape_interval: 30s
                                static_configs:
                                  - targets: ["127.0.0.1:8888"]

                    processors:
                      batch:
                        send_batch_max_size: 2048
                        send_batch_size: 1024
                        timeout: 1s
                      resource/metadata:
                        attributes:
                          - action: upsert
                            key: cx.otel_integration.name
                            value: coralogix-integration-ecs-tail-sampling

                    exporters:
                      loadbalancing:
                        routing_key: "traceID"
                        protocol:
                          otlp:
                            tls:
                              insecure: true
                        resolver:
                          aws_cloud_map:
                            namespace: cx-otel
                            service_name: grpc-sampling
                            interval: 30s
                            port: 4317
                      coralogix:
                        domain: "${CORALOGIX_DOMAIN}"
                        private_key: "${PRIVATE_KEY}"
                        application_name: "${APP_NAME}"
                        subsystem_name: "${SUB_SYS}"
                        application_name_attributes:
                          - "aws.ecs.cluster"
                          - "aws.ecs.task.definition.family"
                        subsystem_name_attributes:
                          - "aws.ecs.container.name"
                          - "aws.ecs.docker.name"
                          - "docker.name"
                        timeout: 30s

                    connectors:
                      spanmetrics:
                        dimensions:
                          - name: http.method
                          - name: cgx.transaction
                          - name: cgx.transaction.root
                          - name: status_code
                          - name: db.namespace
                          - name: db.operation.name
                          - name: db.collection.name
                          - name: db.system
                          - name: http.response.status_code
                          - name: rpc.grpc.status_code
                          - name: service.version
                        histogram:
                          explicit:
                            buckets:
                              - 1ms
                              - 4ms
                              - 10ms
                              - 20ms
                              - 50ms
                              - 100ms
                              - 200ms
                              - 500ms
                              - 1s
                              - 2s
                              - 5s
                        metrics_expiration: 5m
                        metrics_flush_interval: '30s'
                        namespace: ""

                    extensions:
                      health_check:
                      pprof:

                    service:
                      extensions:
                        - health_check
                        - pprof

                      pipelines:
                        traces:
                          receivers: [otlp]
                          processors: [resource/metadata, batch]
                          exporters: [spanmetrics, loadbalancing]
                        metrics:
                          receivers: [spanmetrics]
                          exporters: [coralogix]

                      telemetry:
                        logs:
                          encoding: json
                          level: warn
                        metrics:
                          readers:
                            - pull:
                                exporter:
                                  prometheus:
                                    host: 0.0.0.0
                                    port: 8888
                  - |
                    receivers:
                      otlp:
                        protocols:
                          grpc:
                            endpoint: 0.0.0.0:4317
                            max_recv_msg_size_mib: 20
                          http:
                            endpoint: 0.0.0.0:4318
                        prometheus:
                          config:
                            scrape_configs:
                              - job_name: otel-collector-metrics
                                scrape_interval: 30s
                                static_configs:
                                  - targets: ["127.0.0.1:8888"]

                    processors:
                      batch:
                        send_batch_max_size: 2048
                        send_batch_size: 1024
                        timeout: 1s
                      resource/metadata:
                        attributes:
                          - action: upsert
                            key: cx.otel_integration.name
                            value: coralogix-integration-ecs-tail-sampling

                    exporters:
                      loadbalancing:
                        routing_key: "traceID"
                        protocol:
                          otlp:
                            tls:
                              insecure: true
                        resolver:
                          aws_cloud_map:
                            namespace: cx-otel
                            service_name: grpc-sampling
                            interval: 30s
                            port: 4317
                      coralogix:
                        domain: "${CORALOGIX_DOMAIN}"
                        private_key: "${PRIVATE_KEY}"
                        application_name: "${APP_NAME}"
                        subsystem_name: "${SUB_SYS}"
                        application_name_attributes:
                          - "aws.ecs.cluster"
                          - "aws.ecs.task.definition.family"
                        subsystem_name_attributes:
                          - "aws.ecs.container.name"
                          - "aws.ecs.docker.name"
                          - "docker.name"
                        timeout: 30s

                    extensions:
                      health_check:
                      pprof:

                    service:
                      extensions:
                        - health_check
                        - pprof

                      pipelines:
                        traces:
                          receivers: [otlp]
                          processors: [resource/metadata, batch]
                          exporters: [loadbalancing]

                      telemetry:
                        logs:
                          encoding: json
                          level: warn
                        metrics:
                          readers:
                            - pull:
                                exporter:
                                  prometheus:
                                    host: 0.0.0.0
                                    port: 8888

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/opentelemetry-lb"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "ecs"

  OtelLbService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref SecurityGroupId]
          Subnets: !Split [",", !Ref SubnetIds]
      ServiceName: coralogix-lb
      ServiceRegistries:
        - RegistryArn: !GetAtt OtelLbCloudMapService.Arn
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref LoadBalancerTaskCount
      DeploymentController:
        Type: ECS
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelLbTaskDefinition

Outputs:
  LbServiceDiscoveryName:
    Description: "Service discovery DNS name for load balancer"
    Value: !Sub "grpc-lb.cx-otel"
    Export:
      Name: !Sub "${AWS::StackName}-lb-dns"
  LbServiceArn:
    Description: "Load balancer service ARN"
    Value: !Ref OtelLbService
    Export:
      Name: !Sub "${AWS::StackName}-lb-service-arn" 