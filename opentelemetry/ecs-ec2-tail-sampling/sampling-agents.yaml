AWSTemplateFormatVersion: '2010-09-09'
Description: 'Step 4: Deploy Sampling Agents service'

Parameters:
  ClusterName:
    Type: String
    Default: otel-cluster
    Description: Name of the ECS cluster
  NamespaceId:
    Type: String
    Description: Cloud Map namespace ID (from Step 1)
  SubnetIds:
    Type: String
    Description: Comma-separated list of private subnets for ECS services
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for ECS tasks
  ImageVersion:
    Type: String
    Description: |
      Docker image tag for the OpenTelemetry Collector (e.g., 0.129.1).
      Recommended: Use the official Coralogix supported version from https://github.com/coralogix/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/Chart.yaml#L15
      All available tags: https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
  Memory:
    Type: Number
    Default: 1024
    Description: Memory for ECS tasks (MiB)
  CoralogixDomain:
    Type: String
    Description: Coralogix domain (e.g., coralogix.com)
  CoralogixPrivateKey:
    Type: String
    Description: Coralogix private key
    NoEcho: true
  ApplicationName:
    Type: String
    Default: ecs-ec2-integration
    Description: Application name for Coralogix
  SubsystemName:
    Type: String
    Default: sampling
    Description: Subsystem name for Coralogix
  ConfigSource:
    Type: String
    Description: |
      Select the configuration source for OpenTelemetry Collector.
      - 'template': Use built-in template configuration
      - 's3': Use configuration file from S3 (via S3 URI)
    Default: "template"
    AllowedValues: ["template", "s3"]
  S3ConfigBucket:
    Type: String
    Description: |
      S3 bucket name containing the configuration file.
      Example: 'my-bucket'
      Required when ConfigSource is 's3'.
    Default: ""
  S3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the configuration file.
      Example: 'configs/otel-config.yaml'
      Required when ConfigSource is 's3'.
    Default: ""
  SamplingTaskCount:
    Type: Number
    Default: 1
    Description: Number of Sampling Agent tasks to run


Conditions:
  UseS3Config: !Equals [!Ref ConfigSource, "s3"]
  UseDefaultConfig: !Equals [!Ref ConfigSource, "template"]


Resources:

  OtelSamplingCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: grpc-sampling
      NamespaceId: !Ref NamespaceId
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  OtelSamplingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: opentelemetry-sampling
      RequiresCompatibilities: [EC2]
      NetworkMode: awsvpc

      ContainerDefinitions:
        - Name: coralogix-otel-sampling
          Cpu: 0
          Memory: !Ref Memory
          Command: !If
            - UseS3Config
            - ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${S3ConfigKey}"]
            - ["--config", "env:OTEL_CONFIG"]
          Image: !Sub "otel/opentelemetry-collector-contrib:${ImageVersion}"
          Essential: true
          PortMappings:
            - ContainerPort: 4317
              Name: grpc
              Protocol: tcp
              AppProtocol: grpc
            - ContainerPort: 4318
              Name: http
              Protocol: tcp
            - ContainerPort: 8888
              Name: metrics
              Protocol: tcp
            - ContainerPort: 1777
              Name: pprof
              Protocol: tcp
          Privileged: true
          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !Ref CoralogixDomain
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixPrivateKey
            - Name: APP_NAME
              Value: !Ref ApplicationName
            - Name: SUB_SYS
              Value: !Ref SubsystemName
            - Name: OTEL_CONFIG
              Value: !If
                - UseS3Config
                - ""
                - |
                  receivers:
                    otlp:
                      protocols:
                        grpc:
                          endpoint: 0.0.0.0:4317
                        http:
                          endpoint: 0.0.0.0:4318
                  processors:
                    tail_sampling:
                      decision_wait: 10s
                      num_traces: 5000
                      policies:
                        [
                          {
                            name: sampling-policy,
                            type: probabilistic,
                            probabilistic: { sampling_percentage: 25 },
                          }
                        ]
                  exporters:
                    coralogix:
                      domain: "${CORALOGIX_DOMAIN}"
                      private_key: "${PRIVATE_KEY}"
                      application_name: "${APP_NAME}"
                      subsystem_name: "${SUB_SYS}"
                      application_name_attributes:
                        - "aws.ecs.cluster"
                        - "aws.ecs.task.definition.family"
                      subsystem_name_attributes:
                        - "aws.ecs.container.name"
                        - "aws.ecs.docker.name"
                        - "docker.name"
                      timeout: 30s

                  extensions:
                    health_check:
                    pprof:
                  service:
                    extensions:
                      - health_check
                      - pprof
                    pipelines:
                      traces:
                        receivers: [otlp]
                        processors: [tail_sampling]
                        exporters: [coralogix]
                    telemetry:
                      logs:
                        level: warn
                      metrics:
                        readers:
                          - pull:
                              exporter:
                                prometheus:
                                  host: 0.0.0.0
                                  port: 8888
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/opentelemetry-sampling"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "ecs"

  OtelSamplingService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref SecurityGroupId]
          Subnets: !Split [",", !Ref SubnetIds]
      ServiceName: coralogix-otel-sampling
      ServiceRegistries:
        - RegistryArn: !GetAtt OtelSamplingCloudMapService.Arn
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref SamplingTaskCount
      DeploymentController:
        Type: ECS
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelSamplingTaskDefinition

Outputs:
  SamplingServiceDiscoveryName:
    Description: "Service discovery DNS name for sampling agents"
    Value: !Sub "grpc-sampling.cx-otel"
    Export:
      Name: !Sub "${AWS::StackName}-sampling-dns"
  SamplingServiceArn:
    Description: "Sampling service ARN"
    Value: !Ref OtelSamplingService
    Export:
      Name: !Sub "${AWS::StackName}-sampling-service-arn" 