AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Fully self-contained OpenTelemetry ECS cluster with EC2 infrastructure, Cloud Map, and otel-lb/sampling services.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC for ECS services
  SubnetIds:
    Type: CommaDelimitedList
    Description: Private subnets for ECS services
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for ECS tasks/instances
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access
  ECSAMI:
    Type: AWS::EC2::Image::Id
    Description: ECS-optimized AMI ID for your region
  ImageVersion:
    Type: String
    Description: |
      Docker image tag for the OpenTelemetry Collector (e.g., 0.129.1).
      Recommended: Use the official Coralogix supported version from https://github.com/coralogix/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/Chart.yaml#L15
      All available tags: https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
  Memory:
    Type: Number
    Default: 1024
    Description: Memory for ECS tasks (MiB)
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for ECS hosts
  ClusterName:
    Type: String
    Default: otel-cluster
    Description: Name for the ECS cluster
  CoralogixDomain:
    Type: String
    Description: Coralogix domain (e.g., coralogix.com)
  CoralogixPrivateKey:
    Type: String
    Description: Coralogix private key
    NoEcho: true
  ApplicationName:
    Type: String
    Default: ecs-ec2-integration
    Description: Application name for Coralogix
  SubsystemName:
    Type: String
    Default: sampling
    Description: Subsystem name for Coralogix
  MinSize:
    Type: Number
    Default: 1
    Description: Minimum number of EC2 instances in the Auto Scaling Group
  MaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of EC2 instances in the Auto Scaling Group
  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of EC2 instances in the Auto Scaling Group
  EnableSpanMetrics:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: |
      Enable span metrics generation in the Load Balancer.
      Only applies when ConfigSource=template.
      Ignored when ConfigSource=s3 (use your S3 configuration instead).
  LoadBalancerTaskCount:
    Type: Number
    Default: 1
    Description: Number of Load Balancer tasks to run
  SamplingTaskCount:
    Type: Number
    Default: 1
    Description: Number of Sampling Agent tasks to run
  ConfigSource:
    Type: String
    Description: |
      Select the configuration source for OpenTelemetry Collectors.
      - 'template': Use built-in template configuration for both Load Balancer and Sampling Agent
      - 's3': Use configuration files from S3 for both Load Balancer and Sampling Agent
    Default: "template"
    AllowedValues: ["template", "s3"]
  
  S3ConfigBucket:
    Type: String
    Description: |
      S3 bucket name containing the configuration files.
      Example: 'my-bucket'
      Required when ConfigSource is 's3'.
    Default: ""
  LbS3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the Load Balancer configuration file.
      Example: 'configs/lb-config.yaml'
      Required when ConfigSource is 's3'.
    Default: ""
  SamplingS3ConfigKey:
    Type: String
    Description: |
      S3 object key (file path) for the Sampling Agent configuration file.
      Example: 'configs/sampling-config.yaml'
      Required when ConfigSource is 's3'.
    Default: ""
  
  ECSInstanceRoleArn:
    Type: String
    Description: |
      ARN of an existing IAM role for ECS instances.
      If provided, this role will be used instead of creating a new one.
      Must have ECS, Cloud Map, and S3 permissions (if ConfigSource is 's3').
    Default: ""

Conditions:
  EnableSpanMetricsCondition:
    Fn::Equals:
      - !Ref EnableSpanMetrics
      - "true"
  UseS3Config:
    Fn::Equals:
      - !Ref ConfigSource
      - "s3"
  UseDefaultConfig:
    Fn::Equals:
      - !Ref ConfigSource
      - "template"
  UseCustomInstanceRole:
    Fn::Not:
      - Fn::Equals:
          - !Ref ECSInstanceRoleArn
          - ""
  CreateInstanceRole:
    Fn::Not:
      - Condition: UseCustomInstanceRole

Resources:

  OtelECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Condition: CreateInstanceRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSCloudMapFullAccess
      Policies: !If
        - UseS3Config
        - - PolicyName: S3ReadAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                  Resource: !Sub "arn:aws:s3:::${S3ConfigBucket}/*"
        - !Ref AWS::NoValue

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !If
          - UseCustomInstanceRole
          - !Select [1, !Split ["/", !Ref ECSInstanceRoleArn]]
          - !Ref ECSInstanceRole

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ClusterName}-lt"
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        KeyName: !Ref KeyName
        SecurityGroupIds: [ !Ref SecurityGroupId ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity



  OtelCloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: cx-otel
      Vpc: !Ref VpcId
      Description: "Cloud Map namespace for OpenTelemetry services"

  OtelLbCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: grpc-lb
      NamespaceId: !Ref OtelCloudMapNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  OtelSamplingCloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: grpc-sampling
      NamespaceId: !Ref OtelCloudMapNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  OtelLbTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: opentelemetry-lb
      RequiresCompatibilities: [EC2]
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: coralogix-lb
          Cpu: 0
          Memory: !Ref Memory
          Command: !If
            - UseS3Config
            - ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${LbS3ConfigKey}"]
            - ["--config", "env:OTEL_CONFIG"]
          Image: !Sub "otel/opentelemetry-collector-contrib:${ImageVersion}"
          Essential: true
          PortMappings:
            - ContainerPort: 4317
              Name: grpc
              Protocol: tcp
              AppProtocol: grpc
            - ContainerPort: 4318
              Name: http-lb
              Protocol: tcp
            - ContainerPort: 8888
              Name: metrics-lb
              Protocol: tcp
            - ContainerPort: 1777
              Name: pprof-lb
              Protocol: tcp
          Privileged: true
          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !Ref CoralogixDomain
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixPrivateKey
            - Name: APP_NAME
              Value: !Ref ApplicationName
            - Name: SUB_SYS
              Value: !Ref SubsystemName
            - Name: OTEL_CONFIG
              Value: !If
                - UseS3Config
                - ""
                - !If
                  - EnableSpanMetricsCondition
                  - |
                    receivers:
                      otlp:
                        protocols:
                          grpc:
                            endpoint: 0.0.0.0:4317
                            max_recv_msg_size_mib: 20
                          http:
                            endpoint: 0.0.0.0:4318
                      prometheus:
                        config:
                          scrape_configs:
                            - job_name: otel-collector-metrics
                              scrape_interval: 30s
                              static_configs:
                                - targets: ["127.0.0.1:8888"]

                    processors:
                      batch:
                        send_batch_max_size: 2048
                        send_batch_size: 1024
                        timeout: 1s
                      resource/metadata:
                        attributes:
                          - action: upsert
                            key: cx.otel_integration.name
                            value: coralogix-integration-ecs-tail-sampling

                    exporters:
                      loadbalancing:
                        routing_key: "traceID"
                        protocol:
                          otlp:
                            tls:
                              insecure: true
                        resolver:
                          aws_cloud_map:
                            namespace: cx-otel
                            service_name: grpc-sampling
                            interval: 30s
                            port: 4317
                      coralogix:
                        domain: "${CORALOGIX_DOMAIN}"
                        private_key: "${PRIVATE_KEY}"
                        application_name: "${APP_NAME}"
                        subsystem_name: "${SUB_SYS}"
                        application_name_attributes:
                          - "aws.ecs.cluster"
                          - "aws.ecs.task.definition.family"
                        subsystem_name_attributes:
                          - "aws.ecs.container.name"
                          - "aws.ecs.docker.name"
                          - "docker.name"
                        timeout: 30s

                    connectors:
                      spanmetrics:
                        dimensions:
                          - name: http.method
                          - name: cgx.transaction
                          - name: cgx.transaction.root
                          - name: status_code
                          - name: db.namespace
                          - name: db.operation.name
                          - name: db.collection.name
                          - name: db.system
                          - name: http.response.status_code
                          - name: rpc.grpc.status_code
                          - name: service.version
                        histogram:
                          explicit:
                            buckets:
                              - 1ms
                              - 4ms
                              - 10ms
                              - 20ms
                              - 50ms
                              - 100ms
                              - 200ms
                              - 500ms
                              - 1s
                              - 2s
                              - 5s
                        metrics_expiration: 5m
                        metrics_flush_interval: '30s'
                        namespace: ""

                    extensions:
                      health_check:
                      pprof:

                    service:
                      extensions:
                        - health_check
                        - pprof

                      pipelines:
                        traces:
                          receivers: [otlp]
                          processors: [resource/metadata, batch]
                          exporters: [loadbalancing, spanmetrics]
                        metrics:
                          receivers: [spanmetrics]
                          exporters: [coralogix]

                      telemetry:
                        logs:
                          encoding: json
                          level: warn
                        metrics:
                          readers:
                            - pull:
                                exporter:
                                  prometheus:
                                    host: 0.0.0.0
                                    port: 8888
                  - |
                    receivers:
                      otlp:
                        protocols:
                          grpc:
                            endpoint: 0.0.0.0:4317
                            max_recv_msg_size_mib: 20
                          http:
                            endpoint: 0.0.0.0:4318
                      prometheus:
                        config:
                          scrape_configs:
                            - job_name: otel-collector-metrics
                              scrape_interval: 30s
                              static_configs:
                                - targets: ["127.0.0.1:8888"]

                    processors:
                      batch:
                        send_batch_max_size: 2048
                        send_batch_size: 1024
                        timeout: 1s
                      resource/metadata:
                        attributes:
                          - action: upsert
                            key: cx.otel_integration.name
                            value: coralogix-integration-ecs-tail-sampling

                    exporters:
                      loadbalancing:
                        routing_key: "traceID"
                        protocol:
                          otlp:
                            tls:
                              insecure: true
                        resolver:
                          aws_cloud_map:
                            namespace: cx-otel
                            service_name: grpc-sampling
                            interval: 30s
                            port: 4317
                      coralogix:
                        domain: "${CORALOGIX_DOMAIN}"
                        private_key: "${PRIVATE_KEY}"
                        application_name: "${APP_NAME}"
                        subsystem_name: "${SUB_SYS}"
                        application_name_attributes:
                          - "aws.ecs.cluster"
                          - "aws.ecs.task.definition.family"
                        subsystem_name_attributes:
                          - "aws.ecs.container.name"
                          - "aws.ecs.docker.name"
                          - "docker.name"
                        timeout: 30s

                    extensions:
                      health_check:
                      pprof:

                    service:
                      extensions:
                        - health_check
                        - pprof

                      pipelines:
                        traces:
                          receivers: [otlp]
                          processors: [resource/metadata, batch]
                          exporters: [loadbalancing]

                      telemetry:
                        logs:
                          encoding: json
                          level: warn
                        metrics:
                          readers:
                            - pull:
                                exporter:
                                  prometheus:
                                    host: 0.0.0.0
                                    port: 8888

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/opentelemetry-lb"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "ecs"

  OtelSamplingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: opentelemetry-sampling
      RequiresCompatibilities: [EC2]
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: coralogix-otel-sampling
          Cpu: 0
          Memory: !Ref Memory
          Command: !If
            - UseS3Config
            - ["--config", !Sub "s3://${S3ConfigBucket}.s3.${AWS::Region}.amazonaws.com/${SamplingS3ConfigKey}"]
            - ["--config", "env:OTEL_CONFIG"]
          Image: !Sub "otel/opentelemetry-collector-contrib:${ImageVersion}"
          Essential: true
          PortMappings:
            - ContainerPort: 4317
              Name: grpc
              Protocol: tcp
              AppProtocol: grpc
            - ContainerPort: 4318
              Name: http
              Protocol: tcp
            - ContainerPort: 8888
              Name: metrics
              Protocol: tcp
            - ContainerPort: 1777
              Name: pprof
              Protocol: tcp
          Privileged: true
          Environment:
            - Name: CORALOGIX_DOMAIN
              Value: !Ref CoralogixDomain
            - Name: PRIVATE_KEY
              Value: !Ref CoralogixPrivateKey
            - Name: APP_NAME
              Value: !Ref ApplicationName
            - Name: SUB_SYS
              Value: !Ref SubsystemName
            - Name: OTEL_CONFIG
              Value: !If
                - UseS3Config
                - ""
                - |
                  receivers:
                    otlp:
                      protocols:
                        grpc:
                          endpoint: 0.0.0.0:4317
                        http:
                          endpoint: 0.0.0.0:4318
                  processors:
                    tail_sampling:
                      decision_wait: 10s
                      num_traces: 5000
                      policies:
                        [
                          {
                            name: sampling-policy,
                            type: probabilistic,
                            probabilistic: { sampling_percentage: 25 },
                          }
                        ]
                  exporters:
                    coralogix:
                      domain: "${CORALOGIX_DOMAIN}"
                      private_key: "${PRIVATE_KEY}"
                      application_name: "${APP_NAME}"
                      subsystem_name: "${SUB_SYS}"
                      application_name_attributes:
                        - "aws.ecs.cluster"
                        - "aws.ecs.task.definition.family"
                      subsystem_name_attributes:
                        - "aws.ecs.container.name"
                        - "aws.ecs.docker.name"
                        - "docker.name"
                      timeout: 30s

                  extensions:
                    health_check:
                    pprof:
                  service:
                    extensions:
                      - health_check
                      - pprof
                    pipelines:
                      traces:
                        receivers: [otlp]
                        processors: [tail_sampling]
                        exporters: [coralogix]
                    telemetry:
                      logs:
                        level: warn
                      metrics:
                        readers:
                          - pull:
                              exporter:
                                prometheus:
                                  host: 0.0.0.0
                                  port: 8888

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/opentelemetry-sampling"
              mode: "non-blocking"
              awslogs-create-group: "true"
              max-buffer-size: "25m"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: "ecs"

  OtelSamplingService:
    Type: AWS::ECS::Service
    DependsOn:
      - OtelCloudMapNamespace
      - OtelSamplingCloudMapService
    Properties:
      Cluster: !Ref OtelECSCluster
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref SecurityGroupId]
          Subnets:  !Ref SubnetIds
      ServiceName: coralogix-otel-sampling
      ServiceRegistries:
        - RegistryArn: !GetAtt OtelSamplingCloudMapService.Arn
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref SamplingTaskCount
      DeploymentController:
        Type: ECS
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelSamplingTaskDefinition


  OtelLbService:
    Type: AWS::ECS::Service
    DependsOn:
      - OtelLbCloudMapService
      - OtelSamplingCloudMapService
      - OtelCloudMapNamespace
    Properties:
      Cluster: !Ref OtelECSCluster
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref SecurityGroupId]
          Subnets:  !Ref SubnetIds
      ServiceName: coralogix-lb
      ServiceRegistries:
        - RegistryArn: !GetAtt OtelLbCloudMapService.Arn
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref LoadBalancerTaskCount
      DeploymentController:
        Type: ECS
      EnableECSManagedTags: true
      TaskDefinition: !Ref OtelLbTaskDefinition


Outputs:
  LbServiceDiscoveryName:
    Description: "Service discovery DNS name for otel-lb"
    Value: !Sub "grpc-lb.cx-otel"
  SamplingServiceDiscoveryName:
    Description: "Service discovery DNS name for otel-sampling"
    Value: !Sub "grpc-sampling.cx-otel"
  ECSClusterName:
    Description: "Name of the new ECS cluster"
    Value: !Ref OtelECSCluster
  CloudMapNamespaceId:
    Description: "Cloud Map namespace ID"
    Value: !Ref OtelCloudMapNamespace 